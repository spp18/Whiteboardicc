{"version":3,"file":"groups.spec.js","sourceRoot":"","sources":["../../test/groups.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable no-invalid-this */\nimport { env, Recorder, record } from \"@azure-tools/test-recorder\";\nimport { WebPubSubServiceClient, WebPubSubGroup } from \"../src\";\nimport { assert } from \"chai\";\nimport environmentSetup from \"./testEnv\";\nimport { FullOperationResponse } from \"@azure/core-client\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\n/* eslint-disable @typescript-eslint/no-invalid-this */\n\ndescribe(\"Group client working with a group\", function() {\n  let recorder: Recorder;\n  let client: WebPubSubGroup;\n  let lastResponse: FullOperationResponse | undefined;\n  function onResponse(response: FullOperationResponse) {\n    lastResponse = response;\n  }\n  beforeEach(function() {\n    recorder = record(this, environmentSetup);\n    const hubClient = new WebPubSubServiceClient(env.WPS_CONNECTION_STRING, \"simplechat\");\n    client = hubClient.group(\"group\");\n  });\n\n  it(\"can broadcast to groups\", async () => {\n    await client.sendToAll(\"hello\", { contentType: \"text/plain\", onResponse });\n    assert.equal(lastResponse?.status, 202);\n\n    await client.sendToAll({ x: 1, y: 2 }, { onResponse });\n    assert.equal(lastResponse?.status, 202);\n\n    const binaryMessage = new Uint8Array(10);\n    await client.sendToAll(binaryMessage.buffer, { onResponse });\n    assert.equal(lastResponse?.status, 202);\n  });\n\n  it(\"can manage connections\", async () => {\n    // this endpoint returns 404 for connections not on the hub\n    let error: RestError | undefined;\n    try {\n      await client.addConnection(\"xxxx\");\n    } catch (e) {\n      error = e;\n    }\n\n    assert.exists(error);\n    assert.strictEqual(error?.name, \"RestError\");\n\n    try {\n      await client.removeConnection(\"xxxx\", { onResponse });\n    } catch (e) {\n      assert.exists(error);\n      assert.strictEqual(error?.name, \"RestError\");\n    }\n  });\n\n  // skipping until we can record better tests with an actual user active.\n  it.skip(\"can manage users\", async () => {\n    // service returns 404, this should likely be raised as an error but isn't\n    // due to the swagger design\n    await client.addUser(\"brian\");\n\n    // service returns 404 and this throws.\n    await client.removeUser(\"brian\");\n  });\n\n  afterEach(async function() {\n    if (recorder) {\n      recorder.stop();\n    }\n  });\n});\n"]}