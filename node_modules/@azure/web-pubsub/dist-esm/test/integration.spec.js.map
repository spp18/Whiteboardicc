{"version":3,"file":"integration.spec.js","sourceRoot":"","sources":["../../test/integration.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable no-invalid-this */\nimport { WebPubSubServiceClient } from \"../src/index\";\nimport { env, isLiveMode } from \"@azure-tools/test-recorder\";\nimport { Context } from \"mocha\";\nimport { assert } from \"chai\";\nimport ws from \"ws\";\n\nfunction defer<T>(): {\n  promise: Promise<T>;\n  resolve: (t: T) => void;\n  reject: (err: Error) => void;\n} {\n  let actualResolve: (t: T) => void;\n  let actualReject: (err: Error) => void;\n\n  const promise = new Promise<T>((resolve, reject) => {\n    actualResolve = resolve;\n    actualReject = reject;\n  });\n\n  return {\n    promise,\n    resolve: actualResolve!,\n    reject: actualReject!\n  };\n}\n\nclass SimpleWebSocketFrame {\n  public dataAsString: string | undefined;\n  constructor(public data: Buffer | ArrayBuffer | Buffer[], public isBinary: boolean) {\n    if (!isBinary) {\n      this.dataAsString = data.toString();\n    }\n  }\n\n  isEndSignal(): boolean {\n    return (\n      this.isBinary &&\n      this.data instanceof Buffer &&\n      this.data[0] === 5 &&\n      this.data[1] === 1 &&\n      this.data[2] === 1\n    );\n  }\n}\n\nclass PubSubWebSocketFrame {\n  public message: any;\n  public dataAsString: string;\n  constructor(data: Buffer | ArrayBuffer | Buffer[], isBinary: boolean) {\n    assert.isFalse(isBinary);\n    this.dataAsString = data.toString();\n    this.message = JSON.parse(this.dataAsString);\n  }\n\n  isEndSignal(): boolean {\n    return this.message.dataType === \"binary\" && this.message.data === \"BQEB\";\n  }\n}\n\nfunction getEndSignal(): Uint8Array {\n  // magic number 511\n  const payload = new Uint8Array(3);\n  payload[0] = 5;\n  payload[1] = 1;\n  payload[2] = 1;\n  return payload;\n}\n\ndescribe(\"ServiceClient to manage the connected WebSocket connections\", function() {\n  it(\"Simple clients can receive expected messages with different content types\", async function(this: Context) {\n    if (!isLiveMode()) this.skip();\n    const hub = \"SimpleClientCanReceiveMessage\";\n\n    const messages: SimpleWebSocketFrame[] = [];\n\n    // Get token\n    const serviceClient = new WebPubSubServiceClient(env.WPS_CONNECTION_STRING, hub);\n    const token = await serviceClient.getClientAccessToken();\n    const endSignal = defer<void>();\n    // Start simple WebSocket connections\n    const client = new ws.WebSocket(token.url);\n    client.on(\"message\", (data, isBinary) => {\n      const frame = new SimpleWebSocketFrame(data, isBinary);\n      if (frame.isEndSignal()) {\n        endSignal.resolve();\n        client.close();\n      } else {\n        messages.push(frame);\n      }\n    });\n    client.on(\"open\", async () => {\n      // send to all\n      // Send a JSON message\n      await serviceClient.sendToAll({ message: \"Hello world!\" });\n\n      // Send a plain text message\n      await serviceClient.sendToAll(\"Hi there!\", { contentType: \"text/plain\" });\n\n      // Send the binary end signal message\n      await serviceClient.sendToAll(getEndSignal());\n    });\n    await endSignal.promise;\n\n    assert.equal(messages.length, 2);\n    assert.equal(messages[0].dataAsString, '{\"message\":\"Hello world!\"}');\n    assert.equal(messages[1].dataAsString, \"Hi there!\");\n  });\n\n  it(\"Subprotocol clients can receive expected messages with different content types\", async function(this: Context) {\n    if (!isLiveMode()) this.skip();\n    const hub = \"PubSubClientCanReceiveMessage\";\n    const messages: PubSubWebSocketFrame[] = [];\n\n    // Get token\n    const serviceClient = new WebPubSubServiceClient(env.WPS_CONNECTION_STRING, hub);\n    const token = await serviceClient.getClientAccessToken();\n    const endSignal = defer<void>();\n    // Start simple WebSocket connections\n    const client = new ws.WebSocket(token.url, \"json.webpubsub.azure.v1\");\n    client.on(\"message\", (data, isBinary) => {\n      const frame = new PubSubWebSocketFrame(data, isBinary);\n      if (frame.isEndSignal()) {\n        endSignal.resolve();\n        client.close();\n      } else {\n        messages.push(frame);\n      }\n    });\n    client.on(\"open\", async () => {\n      // send to all\n      // Send a JSON message\n      await serviceClient.sendToAll({ message: \"Hello world!\" });\n\n      // Send a plain text message\n      await serviceClient.sendToAll(\"Hi there!\", { contentType: \"text/plain\" });\n\n      // Send the binary end signal message\n      await serviceClient.sendToAll(getEndSignal());\n    });\n\n    await endSignal.promise;\n\n    assert.equal(messages.length, 3);\n    assert.equal(messages[0].message.event, \"connected\");\n    assert.equal(\n      messages[1].dataAsString,\n      '{\"type\":\"message\",\"from\":\"server\",\"dataType\":\"json\",\"data\":{\"message\":\"Hello world!\"}}'\n    );\n    assert.equal(\n      messages[2].dataAsString,\n      '{\"type\":\"message\",\"from\":\"server\",\"dataType\":\"text\",\"data\":\"Hi there!\"}'\n    );\n  });\n});\n"]}