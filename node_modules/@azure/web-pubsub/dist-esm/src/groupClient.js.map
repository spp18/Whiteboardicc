{"version":3,"file":"groupClient.js","sourceRoot":"","sources":["../../src/groupClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommonClientOptions, FullOperationResponse, OperationOptions } from \"@azure/core-client\";\nimport { RestError, RequestBodyType } from \"@azure/core-rest-pipeline\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { createSpan } from \"./tracing\";\nimport { getPayloadForMessage } from \"./utils\";\nimport { JSONTypes } from \"./hubClient\";\n\n/**\n * Options for constructing a GroupAdmin client.\n */\nexport interface GroupAdminClientOptions extends CommonClientOptions {}\n\n/**\n * Options for adding a connection to a group.\n */\nexport interface GroupAddConnectionOptions extends OperationOptions {}\n\n/**\n * Options for adding a user to a group.\n */\nexport interface GroupAddUserOptions extends OperationOptions {}\n\n/**\n * Options for checking if a user is in a group\n */\nexport interface GroupHasUserOptions extends OperationOptions {}\n\n/**\n * Options for removing a user from a group\n */\nexport interface GroupRemoveUserOptions extends OperationOptions {}\n\n/**\n * Options for removing a connection from a group\n */\nexport interface GroupRemoveConnectionOptions extends OperationOptions {}\n\n/**\n * Options for sending messages to a group.\n */\nexport interface GroupSendToAllOptions extends OperationOptions {\n  /**\n   * Connection ids to exclude from receiving this message.\n   */\n  excludedConnections?: string[];\n}\n\n/**\n * Options for sending text messages to a group..\n */\nexport interface GroupSendTextToAllOptions extends OperationOptions {\n  /**\n   * Connection ids to exclude from receiving this message.\n   */\n  excludedConnections?: string[];\n  contentType: \"text/plain\";\n}\n\n/**\n * Options for closing all connections to a group.\n */\nexport interface GroupCloseAllConnectionsOptions extends OperationOptions {\n  /**\n   * Reason the connection is being closed.\n   */\n  reason?: string;\n}\n\nexport interface WebPubSubGroup {\n  /**\n   * The name of this group\n   */\n  readonly groupName: string;\n\n  /**\n   * The name of the hub this group belongs to\n   */\n  readonly hubName: string;\n\n  /**\n   * The Web PubSub API version being used by this client\n   */\n  readonly apiVersion: string;\n\n  /**\n   * The Web PubSub endpoint this client is connected to\n   */\n  readonly endpoint: string;\n\n  /**\n   * Add a specific connection to this group\n   *\n   * @param connectionId - The connection id to add to this group\n   * @param options - Additional options\n   */\n  addConnection(connectionId: string, options?: GroupAddConnectionOptions): Promise<void>;\n\n  /**\n   * Remove a specific connection from this group\n   *\n   * @param connectionId - The connection id to remove from this group\n   * @param options - Additional options\n   */\n  removeConnection(connectionId: string, options?: GroupRemoveConnectionOptions): Promise<void>;\n\n  /**\n   * Close all connections to the group\n   *\n   * @param options - Additional options\n   */\n  closeAllConnections(options?: GroupCloseAllConnectionsOptions): Promise<void>;\n\n  /**\n   * Add a user to this group\n   *\n   * @param username - The user name to add\n   * @param options - Additional options\n   */\n  addUser(username: string, options?: GroupAddUserOptions): Promise<void>;\n\n  /**\n   * Remove a user from this group\n   *\n   * @param username - The user name to remove\n   * @param options - Additional options\n   */\n  removeUser(username: string, options?: GroupRemoveUserOptions): Promise<void>;\n\n  /**\n   * Send a text message to every connection in this group\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  sendToAll(message: string, options: GroupSendTextToAllOptions): Promise<void>;\n  /**\n   * Send a json message to every connection in this group\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  sendToAll(message: JSONTypes, options?: GroupSendToAllOptions): Promise<void>;\n  /**\n   * Send a binary message to every connection in this group\n   *\n   * @param message - The binary message to send\n   * @param options - Additional options\n   */\n  sendToAll(message: RequestBodyType, options?: GroupSendToAllOptions): Promise<void>;\n}\n\n/**\n * @hidden\n */\nexport class WebPubSubGroupImpl implements WebPubSubGroup {\n  private client!: GeneratedClient;\n\n  /**\n   * The name of this group\n   */\n  public readonly groupName: string;\n\n  /**\n   * The name of the hub this group belongs to\n   */\n  public readonly hubName: string;\n\n  /**\n   * The Web PubSub API version being used by this client\n   */\n  public readonly apiVersion: string = \"2020-10-01\";\n\n  /**\n   * The Web PubSub endpoint this client is connected to\n   */\n  public endpoint!: string;\n\n  /**\n   * @internal\n   */\n  constructor(client: GeneratedClient, hubName: string, groupName: string) {\n    this.client = client;\n    this.groupName = groupName;\n    this.hubName = hubName;\n  }\n  /**\n   * Add a specific connection to this group\n   *\n   * @param connectionId - The connection id to add to this group\n   * @param options - Additional options\n   */\n  public async addConnection(\n    connectionId: string,\n    options: GroupAddConnectionOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"WebPubSubServiceClient-group-addConnection\",\n      options\n    );\n\n    let response: FullOperationResponse | undefined;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      response = rawResponse;\n      if (updatedOptions.onResponse) {\n        updatedOptions.onResponse(rawResponse, flatResponse);\n      }\n    }\n\n    try {\n      await this.client.webPubSub.addConnectionToGroup(this.hubName, this.groupName, connectionId, {\n        ...updatedOptions,\n        onResponse\n      });\n\n      if (response!.status === 404) {\n        throw new RestError(`Connection id '${connectionId}' doesn't exist`, {\n          statusCode: response?.status,\n          request: response?.request,\n          response: response\n        });\n      }\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Remove a specific connection from this group\n   *\n   * @param connectionId - The connection id to remove from this group\n   * @param options - Additional options\n   */\n  public async removeConnection(\n    connectionId: string,\n    options: GroupRemoveConnectionOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"WebPubSubServiceClient-group-removeConnection\",\n      options\n    );\n\n    try {\n      await this.client.webPubSub.removeConnectionFromGroup(\n        this.hubName,\n        this.groupName,\n        connectionId,\n        updatedOptions\n      );\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Close all connections to this group\n   *\n   * @param options - Additional options\n   */\n  public async closeAllConnections(options: GroupCloseAllConnectionsOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"WebPubSubServiceClient-group-closeAllConnections\",\n      options\n    );\n\n    try {\n      return await this.client.webPubSub.closeGroupConnections(\n        this.hubName,\n        this.groupName,\n        updatedOptions\n      );\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Add a user to this group\n   *\n   * @param username - The user name to add\n   * @param options - Additional options\n   */\n  public async addUser(username: string, options: GroupAddUserOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"WebPubSubServiceClient-group-addUser\", options);\n\n    try {\n      await this.client.webPubSub.addUserToGroup(\n        this.hubName,\n        this.groupName,\n        username,\n        updatedOptions\n      );\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Remove a user from this group\n   *\n   * @param username - The user name to remove\n   * @param options - Additional options\n   */\n  public async removeUser(username: string, options: GroupRemoveUserOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"WebPubSubServiceClient-group-removeUser\", options);\n\n    try {\n      await this.client.webPubSub.removeUserFromGroup(\n        this.hubName,\n        this.groupName,\n        username,\n        updatedOptions\n      );\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Send a text message to every connection in this group\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  public async sendToAll(message: string, options: GroupSendTextToAllOptions): Promise<void>;\n  /**\n   * Send a json message to every connection in this group\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  public async sendToAll(message: JSONTypes, options?: GroupSendToAllOptions): Promise<void>;\n  /**\n   * Send a binary message to every connection in this group\n   *\n   * @param message - The binary message to send\n   * @param options - Additional options\n   */\n  public async sendToAll(message: RequestBodyType, options?: GroupSendToAllOptions): Promise<void>;\n\n  public async sendToAll(\n    message: JSONTypes | RequestBodyType,\n    options: GroupSendToAllOptions | GroupSendTextToAllOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"WebPubSubServiceClient-group-sendToAll\", options);\n\n    const { contentType, payload } = getPayloadForMessage(message, updatedOptions);\n\n    try {\n      await this.client.webPubSub.sendToGroup(\n        this.hubName,\n        this.groupName,\n        contentType,\n        payload as any,\n        updatedOptions\n      );\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}