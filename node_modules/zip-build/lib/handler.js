"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var inquirer_1 = __importDefault(require("inquirer"));
var zip_folder_promise_1 = __importDefault(require("zip-folder-promise"));
var userConfirmAsync_1 = require("./userConfirmAsync");
var generateFilename_1 = __importDefault(require("./generateFilename"));
var userResolveConflictAsync_1 = require("./userResolveConflictAsync");
var CWD = process.cwd();
function handler(_a) {
    var buildDir = _a.buildDir, // 'build'
    zipDir = _a.zipDir, // 'dist'
    interactive = _a.interactive, // false
    format = _a.format, // 'zip'
    subDir = _a.subDir, // 'subdirectory'
    name = _a.name, // false
    override = _a.override, // false
    template = _a.template;
    return __awaiter(this, void 0, void 0, function () {
        var BUILDPATH, OUTPATH, mkdirMsg, mkdirAnswer, gitIgMsg, gitIgnoreAnswer, GITIGNOREPATH, outfileName, RESP_FILENAME, outUri, newOutfileName, _b, resMsg, error_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 13, , 14]);
                    BUILDPATH = path_1.default.join(CWD, buildDir);
                    OUTPATH = path_1.default.join(CWD, zipDir);
                    if (!fs_1.default.existsSync(BUILDPATH)) {
                        console.log("There is no directory with the name '".concat(buildDir, "' in your project."));
                        process.exit(1);
                    }
                    if (!!fs_1.default.existsSync(OUTPATH)) return [3 /*break*/, 5];
                    if (!!interactive) return [3 /*break*/, 1];
                    fs_1.default.mkdirSync(OUTPATH);
                    return [3 /*break*/, 5];
                case 1:
                    mkdirMsg = "There is no directory with the name '".concat(zipDir, "'. Do you want to create it?");
                    return [4 /*yield*/, (0, userConfirmAsync_1.userConfirmAsync)(mkdirMsg)];
                case 2:
                    mkdirAnswer = _c.sent();
                    if (!mkdirAnswer) return [3 /*break*/, 4];
                    fs_1.default.mkdirSync(OUTPATH);
                    console.log("'".concat(zipDir, "' created!"));
                    gitIgMsg = "Do you want to include '".concat(zipDir, "' in your .gitignore?");
                    return [4 /*yield*/, (0, userConfirmAsync_1.userConfirmAsync)(gitIgMsg)];
                case 3:
                    gitIgnoreAnswer = _c.sent();
                    if (gitIgnoreAnswer) {
                        console.log("Done!");
                        GITIGNOREPATH = path_1.default.join(CWD, '.gitignore');
                        fs_1.default.appendFileSync(GITIGNOREPATH, "\n".concat(zipDir));
                    }
                    return [3 /*break*/, 5];
                case 4:
                    console.log('Bye!');
                    process.exit(0);
                    _c.label = 5;
                case 5:
                    outfileName = (0, generateFilename_1.default)(template, format);
                    if (!(interactive && name)) return [3 /*break*/, 7];
                    return [4 /*yield*/, inquirer_1.default.prompt([{
                                type: 'input',
                                name: 'RESP_FILENAME',
                                message: 'Set output filename (extension is optional):',
                            }])];
                case 6:
                    RESP_FILENAME = (_c.sent()).RESP_FILENAME;
                    if (RESP_FILENAME)
                        outfileName = RESP_FILENAME;
                    _c.label = 7;
                case 7:
                    outUri = path_1.default.join(OUTPATH, outfileName);
                    if (!(!override && fs_1.default.existsSync(outUri))) return [3 /*break*/, 11];
                    if (!interactive) return [3 /*break*/, 9];
                    return [4 /*yield*/, (0, userResolveConflictAsync_1.userResolveConflictAsync)(zipDir, outfileName)];
                case 8:
                    _b = _c.sent();
                    return [3 /*break*/, 10];
                case 9:
                    _b = (0, userResolveConflictAsync_1.appendTimestampToFilename)(outfileName);
                    _c.label = 10;
                case 10:
                    newOutfileName = _b;
                    outUri = path_1.default.join(OUTPATH, newOutfileName);
                    _c.label = 11;
                case 11: return [4 /*yield*/, (0, zip_folder_promise_1.default)(BUILDPATH, outUri, format, subDir)];
                case 12:
                    resMsg = _c.sent();
                    console.log("".concat(resMsg, " to ").concat(outUri));
                    return [3 /*break*/, 14];
                case 13:
                    error_1 = _c.sent();
                    console.log(error_1);
                    return [3 /*break*/, 14];
                case 14: return [2 /*return*/];
            }
        });
    });
}
exports.default = handler;
//# sourceMappingURL=handler.js.map